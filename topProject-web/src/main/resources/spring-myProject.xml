<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd"
	default-autowire="byName">
	<!-- byName은 <bean name="myBean" class="com.hangugi.MyBean">와 같은 설정에서 이름이 myBean인 객체가 프로퍼티(클래스의 멤버변수)의 값으로 전달될 수 있도록 한다. -->
	
	<!-- <context:annotation-config /> 설정은 @Required, @Autowired @Resource, @PostConstruct, @PreDestory, @Configuration 설정되어 있는 빈을 자동으로 등록해준다.
	스프링3.0 프로그래밍. p.117 -->
	<context:annotation-config />
	
	<!-- <mvc:annotation-driven /> 을 설정함으로써 자동 설정되는 빈. @ResponseBody를 사용하기 위해 이 설정을 했다. http://zgundam.tistory.com/10
	웹애플리케이션이 아닌 일반 애플리케이션에서 이 설정을 수행하면 애플리케이션 컴파일 시 에러가 발생한다. 	
	  -->
	<mvc:annotation-driven />
	
	<!-- 	
	<mvc:resources location="/css/**" mapping="/css/**"/>
	<mvc:resources location="/image/**" mapping="/image/**"/>
	<mvc:resources location="/js/**" mapping="/js/**"/>
	 -->
	
	<!-- 이 기능은 스프링 3.0.4 또는 그 이후 버전에서만 지원된다. 아래 설정을 넣더라도 /로 시작하는 모든 URL이 이 DispatcherServlet으로 매핑되는 것은 바뀌지 않는다.
	대신 DispatcherServlet에 정적 리소스 파일(js, css 등)에 대한 요청을 디폴트 서블릿(톰캣의 web.xml에 정의되어 있다.) 으로 포워딩하는 기능이 추가될 뿐이다. 
	DispatcherServlet 이 요청을 받으면 먼저 @RequestMapping의 요청 조건에 맞는지 확인한다. 만약 요청을 처리할 핸들러를 찾지 못하면 해당 요청은 정적 리소스라고 판단하고 디폴트 서블릿으로 넘긴다.
	만약 /user/1 로 요청이 들어오면 @RequestMapping을 사용한 컨트롤러가 매핑되서 이를 처리할 것이다. 반면에 /js/jquery.js 같은 요청은 @RequestMapping 용 매핑 전략에선 적절한 핸들러를
	찾을 수 없으니 결국 가장 우선순위가 낮은 디폴트 서블릿 매핑 전략을 통해 컨테이너가 제공하는 디폴트 서블릿으로 요청이 포워딩된다.
	 -->
	<mvc:default-servlet-handler/>
	
	<context:component-scan base-package="com.hangugi" />
	
	<!-- http://docs.spring.io/spring/docs/3.2.13.RELEASE/spring-framework-reference/html/index.html 
	6.4 ~ 6.7 Resource interface 와 classpath* 에 대한 설명이 있다. -->
	<!-- <import resource="classpath*:spring-quartz.xml"/> -->
	<import resource="classpath*:spring-viewResolver.xml"/>
	<import resource="classpath*:spring-multipartResolver.xml"/>
</beans>